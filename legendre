import numpy as np
import pandas as pd


def MyLegendre(n, x):
    """
    Function to calculate the Legendre Polynomial of order n at given points x using
    explicit series representation.
    
    Args:
    - n (int): Order of the Legendre Polynomial
    - x (array-like): Array of x-values at which the Legendre Polynomial is to be calculated
    
    Returns:
    - y (array-like): Array of y-values representing the Legendre Polynomial at given x-values
    """
    # Initializing Legendre Polynomials for n=0 and n=1
    Pnm1 = 1.0
    Pn = x
    
    # Calculating Legendre Polynomial for given order n and x-values
    if n == 0:
        y = Pnm1 * np.ones_like(x)
    elif n == 1:
        y = Pn
    else:
        for i in range(2, n+1):
            Pnp1 = ((2*i - 1)*x*Pn - (i - 1)*Pnm1) / i
            Pnm1 = Pn
            Pn = Pnp1
        y = Pn
        
    return y


def generate_legendre_table(M):
    """
    Function to generate table of first six Legendre Polynomials and their values
    for given M equally spaced values in the range [-1, 1].
    
    Args:
    - M (int): Number of equally spaced values of x in the range [-1, 1]
    
    Returns:
    - None (saves table in text file)
    """
    # Generating equally spaced x-values
    x = np.linspace(-1, 1, M)
    
    # Initializing empty table
    table = pd.DataFrame(columns=['x'] + ['P'+str(i) for i in range(6)])
    
    # Filling table with Legendre Polynomial values for each x
    for i in range(M):
        row = [x[i]]
        for j in range(6):
            row.append(MyLegendre(j, x[i]))
        table.loc[i] = row
    
    # Saving table in text file
    table.to_csv('legendre_table.txt', index=False, sep='\t')
    
    return None
generate_legendre_table(10)  # generates table with 10 equally spaced values of x in [-1, 1]
import numpy as np
from MyIntegration import MySimp1by3
from MyLegendre import MyLegendre

def legendre_int(l, m):
    """
    Evaluates the integral of Pl(x)*Pm(x) from -1 to 1 using Simpson1/3 method
    :param l: order of first Legendre polynomial
    :param m: order of second Legendre polynomial
    :return: value of the integral
    """
    # Defining the integrand
    f = lambda x: MyLegendre(l, 1, x) * MyLegendre(m, 1, x)
    
    # Limits of integration
    a, b = -1, 1
    
    # Tolerance for Simpson's 1/3 method
    tol = 1e-6
    
    # Evaluate integral using Simpson's 1/3 method
    I, n = MySimp1by3(f, a, b, tol=tol, max_panels=10000)
    
    # Return the value of the integral
    return I

# Verify the orthonormality condition for l = 2, m = 1
l, m = 2, 1

# Initialize a table to store the values of the integral
table = np.zeros((l+1, m+1))

# Evaluate the integrals for all combinations of l and m
for i in range(l+1):
    for j in range(m+1):
        table[i, j] = legendre_int(i, j)

# Display the table
print(table)
